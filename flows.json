[
    {
        "id": "18cc067c93d5298d",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "070add851cfde950",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "6cd113c29916863b",
        "type": "ui_group",
        "name": "Calculator",
        "tab": "070add851cfde950",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "13d9c5c6874c5d86",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "e794870d45f595e7",
        "type": "mqtt-broker",
        "name": "Mosquitto Server",
        "broker": "https://test.mosquitto.org/",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "5285bdb0b95877f9",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d4ac752d0c0c9669",
        "type": "ui_group",
        "name": "Maximum Light Intensity",
        "tab": "5285bdb0b95877f9",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "505c7b7f55a8a63e",
        "type": "ui_group",
        "name": "Temperature",
        "tab": "5285bdb0b95877f9",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "fdb57b529356aa4d",
        "type": "ui_tab",
        "name": "Settings",
        "icon": "settings",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "59cb6c35f86cce23",
        "type": "ui_group",
        "name": "Light Control Settings",
        "tab": "fdb57b529356aa4d",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8352d8f943e7839c",
        "type": "ui_spacer",
        "z": "18cc067c93d5298d",
        "name": "spacer",
        "group": "d4ac752d0c0c9669",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "7cbdb8a9564ef010",
        "type": "ui_spacer",
        "z": "18cc067c93d5298d",
        "name": "spacer",
        "group": "d4ac752d0c0c9669",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "5aae806bf57d82e9",
        "type": "ui_spacer",
        "z": "18cc067c93d5298d",
        "name": "spacer",
        "group": "505c7b7f55a8a63e",
        "order": 2,
        "width": 8,
        "height": 1
    },
    {
        "id": "aaf86c2a5b89a525",
        "type": "mqtt in",
        "z": "18cc067c93d5298d",
        "name": "MQTT IN",
        "topic": "MEDIBOX_Send_210625",
        "qos": "2",
        "datatype": "json",
        "broker": "e794870d45f595e7",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 120,
        "wires": [
            [
                "4d6b5ddf322a188a",
                "849fbcb63ae28ee8"
            ]
        ]
    },
    {
        "id": "2dfcd8844eb2b220",
        "type": "debug",
        "z": "18cc067c93d5298d",
        "name": "debug incoming data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 380,
        "wires": []
    },
    {
        "id": "6d26c0d8af9fa319",
        "type": "ui_gauge",
        "z": "18cc067c93d5298d",
        "name": "Light Intensity Gauge",
        "group": "d4ac752d0c0c9669",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Realtime",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": "1",
        "colors": [
            "#e6e600",
            "#00b500",
            "#ca3838"
        ],
        "seg1": "0.33",
        "seg2": "0.66",
        "diff": false,
        "className": "",
        "x": 760,
        "y": 440,
        "wires": []
    },
    {
        "id": "4d6b5ddf322a188a",
        "type": "function",
        "z": "18cc067c93d5298d",
        "name": "max_light()",
        "func": "let ldr1 = parseFloat(msg.payload[\"LDR1\"]);\nlet ldr2 = parseFloat(msg.payload[\"LDR2\"]);\nlet maxLight;\nlet highLDR;\n\nif (!isNaN(ldr1) && !isNaN(ldr2)) {\n    if (ldr1 > ldr2) {\n        maxLight = ldr1.toFixed(2);\n        highLDR =  'LDR 1';    \n    } else {\n        maxLight = ldr2.toFixed(2);\n        highLDR =  'LDR 2'; \n    }\n    global.set(\"maxLight\",maxLight);\n    global.set(\"highLDR\",highLDR);\n     return { payload: maxLight, high: highLDR };\n} else {\n    return { payload: -1,high: 'No Data!'  };\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 380,
        "wires": [
            [
                "f80f323954949893",
                "593b0f745dd35731"
            ]
        ]
    },
    {
        "id": "de81ef9403a70c0b",
        "type": "ui_chart",
        "z": "18cc067c93d5298d",
        "name": "Light Intensity Plot",
        "group": "d4ac752d0c0c9669",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "Last 15 Minutes",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "15",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1130,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "962a7a33facbdd7d",
        "type": "ui_toast",
        "z": "18cc067c93d5298d",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "Error Fetching Light Data!",
        "topic": "",
        "name": "Error Fetching Light Data!",
        "x": 950,
        "y": 320,
        "wires": []
    },
    {
        "id": "f80f323954949893",
        "type": "switch",
        "z": "18cc067c93d5298d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "-1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 380,
        "wires": [
            [
                "2dfcd8844eb2b220",
                "1cfd5d52d0dcee8e"
            ],
            [
                "2dfcd8844eb2b220",
                "6d26c0d8af9fa319",
                "225dd7bf2dcc0a79",
                "ec840ab8e7d5dfa8",
                "a1d2da4705414223"
            ]
        ]
    },
    {
        "id": "676ddd8f708b2462",
        "type": "ui_gauge",
        "z": "18cc067c93d5298d",
        "name": "Temperature Gauge",
        "group": "505c7b7f55a8a63e",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Realtime",
        "label": "Celcius",
        "format": "{{value}}",
        "min": 0,
        "max": "40",
        "colors": [
            "#287be6",
            "#04e600",
            "#ca3838"
        ],
        "seg1": "26",
        "seg2": "32",
        "diff": false,
        "className": "",
        "x": 660,
        "y": 60,
        "wires": []
    },
    {
        "id": "849fbcb63ae28ee8",
        "type": "function",
        "z": "18cc067c93d5298d",
        "name": "Temperature()",
        "func": "\nreturn {payload: parseFloat(msg.payload[\"Temperature\"]).toFixed(2)};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 120,
        "wires": [
            [
                "7753c7ee18ad60ac"
            ]
        ]
    },
    {
        "id": "d934e0e03f38b7ef",
        "type": "ui_chart",
        "z": "18cc067c93d5298d",
        "name": "Temperature Plot",
        "group": "505c7b7f55a8a63e",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Last Hour",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "cubic",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1090,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "7753c7ee18ad60ac",
        "type": "switch",
        "z": "18cc067c93d5298d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 120,
        "wires": [
            [
                "676ddd8f708b2462",
                "b49f879606f733ce"
            ],
            [
                "8dd07d737150ee4f"
            ]
        ]
    },
    {
        "id": "6b5427f4ebc16db4",
        "type": "ui_toast",
        "z": "18cc067c93d5298d",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "Error Fetching Temperature Data!",
        "topic": "",
        "name": "Error Fetching Temperature Data!",
        "x": 880,
        "y": 180,
        "wires": []
    },
    {
        "id": "593b0f745dd35731",
        "type": "ui_text",
        "z": "18cc067c93d5298d",
        "group": "d4ac752d0c0c9669",
        "order": 3,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Source : ",
        "format": "{{msg.high}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 720,
        "y": 260,
        "wires": []
    },
    {
        "id": "625e0464b9463490",
        "type": "ui_slider",
        "z": "18cc067c93d5298d",
        "name": "Min Angle Slider",
        "label": "Minimum Angle",
        "tooltip": "",
        "group": "59cb6c35f86cce23",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "min": 0,
        "max": "120",
        "step": "1",
        "className": "",
        "x": 700,
        "y": 1020,
        "wires": [
            [
                "c4bcc1f4e2e77257"
            ]
        ]
    },
    {
        "id": "9ea3690c204d3522",
        "type": "ui_slider",
        "z": "18cc067c93d5298d",
        "name": "Control Factor Slider",
        "label": "Control Factor",
        "tooltip": "",
        "group": "59cb6c35f86cce23",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "min": 0,
        "max": "1",
        "step": "0.01",
        "className": "",
        "x": 740,
        "y": 860,
        "wires": [
            [
                "9fbf6858d3b2b7cc"
            ]
        ]
    },
    {
        "id": "d9fd65fb26699848",
        "type": "mqtt out",
        "z": "18cc067c93d5298d",
        "name": "MQTT OUT",
        "topic": "MEDIBOX_Receive_210625",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e794870d45f595e7",
        "x": 1530,
        "y": 820,
        "wires": []
    },
    {
        "id": "2e33d40201b5f672",
        "type": "function",
        "z": "18cc067c93d5298d",
        "name": "calculateAngle()",
        "func": "let minAngle = parseFloat(flow.get(\"minAngle\"));\nlet controlFactor = parseFloat(flow.get(\"controlFactor\"));\nlet maxLight = parseFloat(global.get(\"maxLight\"));\nlet higherLDR = global.get(\"highLDR\");\nlet constD;\nlet angle;\n\nif (higherLDR === \"LDR 1\"){\n        constD = 1.5;\n    }\nelse{\n        constD = 0.5;\n    }\nangle = Math.round(Math.min(minAngle*constD+(180-minAngle)*maxLight*controlFactor,180));\nreturn {payload:angle};\n// return {a:minAngle,b:controlFactor,c:medicineType,d:maxLight,e:higherLDR,f:angle,g:constD}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 860,
        "wires": [
            [
                "e1128276c5a446bc"
            ]
        ]
    },
    {
        "id": "c6d41f17778b020d",
        "type": "ui_dropdown",
        "z": "18cc067c93d5298d",
        "name": "Medicine Type Dropdown",
        "label": "Select the Medicine Type",
        "tooltip": "",
        "place": "Select option",
        "group": "59cb6c35f86cce23",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Custom",
                "value": 1,
                "type": "num"
            },
            {
                "label": "Type A",
                "value": 2,
                "type": "num"
            },
            {
                "label": "Type B",
                "value": 3,
                "type": "num"
            },
            {
                "label": "Type C",
                "value": 4,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 730,
        "y": 680,
        "wires": [
            [
                "7c70f85f1f53a313"
            ]
        ]
    },
    {
        "id": "f3d62f0ddc57af2f",
        "type": "debug",
        "z": "18cc067c93d5298d",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 900,
        "wires": []
    },
    {
        "id": "bd73181b6da66569",
        "type": "trigger",
        "z": "18cc067c93d5298d",
        "name": "Default Starting Parameters Trigger",
        "op1": "{\"minAngle\":30,\"controlFactor\":0.75,\"medicineType\":1}",
        "op2": "0",
        "op1type": "json",
        "op2type": "str",
        "duration": "0",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 200,
        "y": 680,
        "wires": [
            [
                "07b8842da674b372",
                "666b35f4793949ec",
                "4110aad0a5130ffc"
            ]
        ],
        "info": "Sends degault values and triggers starting of sending angles to the medibox.\r\nThis trigger activates when the light data is ready."
    },
    {
        "id": "07b8842da674b372",
        "type": "function",
        "z": "18cc067c93d5298d",
        "name": "filterMinAngle()",
        "func": "return { payload: msg.payload[\"minAngle\"] };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1020,
        "wires": [
            [
                "625e0464b9463490"
            ]
        ]
    },
    {
        "id": "666b35f4793949ec",
        "type": "function",
        "z": "18cc067c93d5298d",
        "name": "filterControlFactor()",
        "func": "\nreturn {payload:msg.payload[\"controlFactor\"]};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 860,
        "wires": [
            [
                "9ea3690c204d3522"
            ]
        ]
    },
    {
        "id": "4110aad0a5130ffc",
        "type": "function",
        "z": "18cc067c93d5298d",
        "name": "filterMedType()",
        "func": "return {payload: msg.payload[\"medicineType\"]};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 680,
        "wires": [
            [
                "c6d41f17778b020d"
            ]
        ]
    },
    {
        "id": "c4bcc1f4e2e77257",
        "type": "function",
        "z": "18cc067c93d5298d",
        "name": "helper()",
        "func": "flow.set(\"minAngle\",msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1020,
        "wires": [
            [
                "2e33d40201b5f672",
                "52e189295bb01740"
            ]
        ]
    },
    {
        "id": "9fbf6858d3b2b7cc",
        "type": "function",
        "z": "18cc067c93d5298d",
        "name": "helper()",
        "func": "flow.set(\"controlFactor\",msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 860,
        "wires": [
            [
                "2e33d40201b5f672",
                "52e189295bb01740"
            ]
        ]
    },
    {
        "id": "75ac48309e4c07e2",
        "type": "function",
        "z": "18cc067c93d5298d",
        "name": "Update Sliders()",
        "func": "flow.set(\"medicineType\",msg.payload);\nlet defMedData = flow.get(\"defMedConfig\");\nlet minAngle;\nlet controlFactor;\n\nif (msg.payload ===2){\n    minAngle = defMedData[\"A\"][\"minAngle\"];\n    controlFactor =  defMedData[\"A\"][\"controlFactor\"];\n}\nelse if (msg.payload ===3){\n    minAngle =  defMedData[\"B\"][\"minAngle\"];\n    controlFactor = defMedData[\"B\"][\"controlFactor\"];\n}\nelse{\n    minAngle = defMedData[\"C\"][\"minAngle\"];\n    controlFactor = defMedData[\"C\"][\"controlFactor\"];\n}\nreturn {payload:{\"minAngle\": minAngle, \"controlFactor\": controlFactor}};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 680,
        "wires": [
            [
                "666b35f4793949ec",
                "07b8842da674b372"
            ]
        ]
    },
    {
        "id": "ec840ab8e7d5dfa8",
        "type": "rbe",
        "z": "18cc067c93d5298d",
        "name": "",
        "func": "deadbandEq",
        "gap": "5%",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 720,
        "y": 560,
        "wires": [
            [
                "2e33d40201b5f672"
            ]
        ]
    },
    {
        "id": "e1128276c5a446bc",
        "type": "rbe",
        "z": "18cc067c93d5298d",
        "name": "",
        "func": "deadbandEq",
        "gap": "10",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1360,
        "y": 860,
        "wires": [
            [
                "d9fd65fb26699848",
                "f3d62f0ddc57af2f"
            ]
        ]
    },
    {
        "id": "c91c1f36272d4f18",
        "type": "switch",
        "z": "18cc067c93d5298d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 1070,
        "y": 680,
        "wires": [
            [
                "75ac48309e4c07e2"
            ]
        ]
    },
    {
        "id": "7c70f85f1f53a313",
        "type": "rbe",
        "z": "18cc067c93d5298d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 930,
        "y": 680,
        "wires": [
            [
                "c91c1f36272d4f18"
            ]
        ]
    },
    {
        "id": "225dd7bf2dcc0a79",
        "type": "function",
        "z": "18cc067c93d5298d",
        "name": "defMedConfig()",
        "func": "return msg;\n\n/*This function (On start tab) contains the default values \nfor the parameters \"controlFactor\" and \"minAngle\" for three medicine presets.\nIt sets them as flow variables on start.\nThis is required for updating the UI when ever a preset medicine isselected in the\ndrop down, but user changes a slider to a non preset configuration.\n(Otherwise their will be infinity loop of updating\nthe sliders and the dropdown.)*/",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"defMedConfig\", {A: { minAngle: 0, controlFactor: 0.1 }, B: { minAngle: 45, controlFactor: 0.5 }, C: { minAngle: 20, controlFactor: 1 }});",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 600,
        "wires": [
            [
                "bd73181b6da66569"
            ]
        ]
    },
    {
        "id": "52e189295bb01740",
        "type": "function",
        "z": "18cc067c93d5298d",
        "name": "resetDropdowmToCustom()",
        "func": "let defMedData = flow.get(\"defMedConfig\");\nlet currentMA= flow.get(\"minAngle\");\nlet currentCF = flow.get(\"controlFactor\");\n\nlet isNotA = (currentCF != defMedData[\"A\"][\"controlFactor\"] || currentMA != defMedData[\"A\"][\"minAngle\"]);\nlet isNotB = (currentCF != defMedData[\"B\"][\"controlFactor\"] || currentMA != defMedData[\"B\"][\"minAngle\"]);\nlet isNotC = (currentCF != defMedData[\"C\"][\"controlFactor\"] || currentMA != defMedData[\"C\"][\"minAngle\"]);\n\nif (isNotA && isNotB && isNotC){\n    return {payload:1};\n}\nelse{\n    return {payload:\"block\"};\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 1020,
        "wires": [
            [
                "dda0e9ced4b1c697"
            ]
        ]
    },
    {
        "id": "dda0e9ced4b1c697",
        "type": "switch",
        "z": "18cc067c93d5298d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "block",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 490,
        "y": 760,
        "wires": [
            [
                "c6d41f17778b020d"
            ]
        ]
    },
    {
        "id": "8dd07d737150ee4f",
        "type": "rbe",
        "z": "18cc067c93d5298d",
        "name": "Block Repeat",
        "func": "rbei",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 630,
        "y": 180,
        "wires": [
            [
                "6b5427f4ebc16db4"
            ]
        ]
    },
    {
        "id": "1cfd5d52d0dcee8e",
        "type": "rbe",
        "z": "18cc067c93d5298d",
        "name": "Block Repeat",
        "func": "rbei",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 730,
        "y": 320,
        "wires": [
            [
                "962a7a33facbdd7d"
            ]
        ]
    },
    {
        "id": "00daccee8e7d8cd4",
        "type": "trigger",
        "z": "18cc067c93d5298d",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "-1",
        "extend": true,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 870,
        "y": 120,
        "wires": [
            [
                "d934e0e03f38b7ef"
            ]
        ]
    },
    {
        "id": "34a4f7c7d0145883",
        "type": "trigger",
        "z": "18cc067c93d5298d",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "-10",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 930,
        "y": 500,
        "wires": [
            [
                "de81ef9403a70c0b"
            ]
        ]
    },
    {
        "id": "b49f879606f733ce",
        "type": "delay",
        "z": "18cc067c93d5298d",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "30",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 660,
        "y": 120,
        "wires": [
            [
                "00daccee8e7d8cd4"
            ]
        ]
    },
    {
        "id": "a1d2da4705414223",
        "type": "delay",
        "z": "18cc067c93d5298d",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 740,
        "y": 500,
        "wires": [
            [
                "34a4f7c7d0145883"
            ]
        ]
    }
]